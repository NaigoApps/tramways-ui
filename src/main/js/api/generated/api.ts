// tslint:disable
/**
 * Tramways API
 * Tramways API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface Analysis
 */
export interface Analysis extends Resource {
    /**
     *
     * @type {string}
     * @memberof Analysis
     */
    name?: string;
    /**
     *
     * @type {AnalysisStatus}
     * @memberof Analysis
     */
    status?: AnalysisStatus;
    /**
     *
     * @type {AnalysisResult}
     * @memberof Analysis
     */
    result?: AnalysisResult;
}
/**
 *
 * @export
 * @interface AnalysisAllOf
 */
export interface AnalysisAllOf {
    /**
     *
     * @type {string}
     * @memberof AnalysisAllOf
     */
    name?: string;
    /**
     *
     * @type {AnalysisStatus}
     * @memberof AnalysisAllOf
     */
    status?: AnalysisStatus;
    /**
     *
     * @type {AnalysisResult}
     * @memberof AnalysisAllOf
     */
    result?: AnalysisResult;
}
/**
 *
 * @export
 * @interface AnalysisDescription
 */
export interface AnalysisDescription extends Resource {
    /**
     *
     * @type {string}
     * @memberof AnalysisDescription
     */
    name?: string;
    /**
     *
     * @type {AnalysisStatus}
     * @memberof AnalysisDescription
     */
    status?: AnalysisStatus;
}
/**
 *
 * @export
 * @interface AnalysisDescriptionAllOf
 */
export interface AnalysisDescriptionAllOf {
    /**
     *
     * @type {string}
     * @memberof AnalysisDescriptionAllOf
     */
    name?: string;
    /**
     *
     * @type {AnalysisStatus}
     * @memberof AnalysisDescriptionAllOf
     */
    status?: AnalysisStatus;
}
/**
 *
 * @export
 * @interface AnalysisRequest
 */
export interface AnalysisRequest {
    /**
     *
     * @type {string}
     * @memberof AnalysisRequest
     */
    projectId?: string;
    /**
     *
     * @type {string}
     * @memberof AnalysisRequest
     */
    mapId?: string;
    /**
     *
     * @type {string}
     * @memberof AnalysisRequest
     */
    analysisTypeId?: string;
    /**
     *
     * @type {Array<Property>}
     * @memberof AnalysisRequest
     */
    parameters?: Array<Property>;
}
/**
 *
 * @export
 * @interface AnalysisResponse
 */
export interface AnalysisResponse {
    /**
     *
     * @type {Array<string>}
     * @memberof AnalysisResponse
     */
    warnings?: Array<string>;
    /**
     *
     * @type {Array<Property>}
     * @memberof AnalysisResponse
     */
    parameters?: Array<Property>;
    /**
     *
     * @type {boolean}
     * @memberof AnalysisResponse
     */
    ok?: boolean;
}
/**
 *
 * @export
 * @interface AnalysisResult
 */
export interface AnalysisResult {
    /**
     *
     * @type {AnalysisResultType}
     * @memberof AnalysisResult
     */
    resultType?: AnalysisResultType;
}
/**
 *
 * @export
 * @enum {string}
 */
export enum AnalysisResultType {
    XY = 'XY',
    STRING = 'STRING'
}

/**
 *
 * @export
 * @enum {string}
 */
export enum AnalysisStatus {
    INPROGRESS = 'IN_PROGRESS',
    DONE = 'DONE',
    ERROR = 'ERROR'
}

/**
 *
 * @export
 * @interface AnalysisType
 */
export interface AnalysisType {
    /**
     *
     * @type {string}
     * @memberof AnalysisType
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AnalysisType
     */
    name?: string;
}
/**
 *
 * @export
 * @interface BooleanWrapper
 */
export interface BooleanWrapper {
    /**
     *
     * @type {boolean}
     * @memberof BooleanWrapper
     */
    value?: boolean;
}
/**
 *
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     *
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    oldPassword?: string;
    /**
     *
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    newPassword?: string;
}
/**
 *
 * @export
 * @interface ChoiceElement
 */
export interface ChoiceElement {
    /**
     *
     * @type {string}
     * @memberof ChoiceElement
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ChoiceElement
     */
    label?: string;
}
/**
 *
 * @export
 * @interface ChoiceProperty
 */
export interface ChoiceProperty extends Property {
    /**
     *
     * @type {Array<ChoiceElement>}
     * @memberof ChoiceProperty
     */
    choices?: Array<ChoiceElement>;
    /**
     *
     * @type {string}
     * @memberof ChoiceProperty
     */
    value?: string;
}
/**
 *
 * @export
 * @interface ChoicePropertyAllOf
 */
export interface ChoicePropertyAllOf {
    /**
     *
     * @type {Array<ChoiceElement>}
     * @memberof ChoicePropertyAllOf
     */
    choices?: Array<ChoiceElement>;
    /**
     *
     * @type {string}
     * @memberof ChoicePropertyAllOf
     */
    value?: string;
}
/**
 *
 * @export
 * @interface Configurable
 */
export interface Configurable {
    /**
     *
     * @type {string}
     * @memberof Configurable
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Configurable
     */
    category?: string;
    /**
     *
     * @type {string}
     * @memberof Configurable
     */
    configurableType?: string;
    /**
     *
     * @type {Array<Property>}
     * @memberof Configurable
     */
    props?: Array<Property>;
}
/**
 *
 * @export
 * @interface ConfigurableCategory
 */
export interface ConfigurableCategory {
    /**
     *
     * @type {string}
     * @memberof ConfigurableCategory
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ConfigurableCategory
     */
    description?: string;
}
/**
 *
 * @export
 * @interface CreateConfigurationRequest
 */
export interface CreateConfigurationRequest {
    /**
     *
     * @type {string}
     * @memberof CreateConfigurationRequest
     */
    name?: string;
    /**
     *
     * @type {Array<Property>}
     * @memberof CreateConfigurationRequest
     */
    props?: Array<Property>;
}
/**
 *
 * @export
 * @interface CreateMapRequest
 */
export interface CreateMapRequest {
    /**
     *
     * @type {RoadMap}
     * @memberof CreateMapRequest
     */
    map?: RoadMap;
}
/**
 *
 * @export
 * @interface CreateProjectRequest
 */
export interface CreateProjectRequest {
    /**
     *
     * @type {string}
     * @memberof CreateProjectRequest
     */
    name?: string;
}
/**
 *
 * @export
 * @interface CrossingLink
 */
export interface CrossingLink extends Configurable {
    /**
     *
     * @type {string}
     * @memberof CrossingLink
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof CrossingLink
     */
    destinationId?: string;
}
/**
 *
 * @export
 * @interface DecimalProperty
 */
export interface DecimalProperty extends Property {
    /**
     *
     * @type {number}
     * @memberof DecimalProperty
     */
    value?: number;
}
/**
 *
 * @export
 * @interface DecimalPropertyAllOf
 */
export interface DecimalPropertyAllOf {
    /**
     *
     * @type {number}
     * @memberof DecimalPropertyAllOf
     */
    value?: number;
}
/**
 *
 * @export
 * @interface Distribution
 */
export interface Distribution {
    /**
     *
     * @type {DistributionType}
     * @memberof Distribution
     */
    distributionType: DistributionType;
}
/**
 *
 * @export
 * @interface DistributionProperty
 */
export interface DistributionProperty extends Property {
    /**
     *
     * @type {Distribution}
     * @memberof DistributionProperty
     */
    value?: Distribution;
}
/**
 *
 * @export
 * @interface DistributionPropertyAllOf
 */
export interface DistributionPropertyAllOf {
    /**
     *
     * @type {Distribution}
     * @memberof DistributionPropertyAllOf
     */
    value?: Distribution;
}
/**
 *
 * @export
 * @enum {string}
 */
export enum DistributionType {
    UNIFORM = 'UNIFORM',
    EXPONENTIAL = 'EXPONENTIAL'
}

/**
 *
 * @export
 * @interface ErrorWrapper
 */
export interface ErrorWrapper {
    /**
     *
     * @type {string}
     * @memberof ErrorWrapper
     */
    message?: string;
}
/**
 *
 * @export
 * @interface ExponentialDistribution
 */
export interface ExponentialDistribution extends Distribution {
    /**
     *
     * @type {number}
     * @memberof ExponentialDistribution
     */
    lambda?: number;
}
/**
 *
 * @export
 * @interface ExponentialDistributionAllOf
 */
export interface ExponentialDistributionAllOf {
    /**
     *
     * @type {number}
     * @memberof ExponentialDistributionAllOf
     */
    lambda?: number;
}
/**
 *
 * @export
 * @interface IntegerProperty
 */
export interface IntegerProperty extends Property {
    /**
     *
     * @type {number}
     * @memberof IntegerProperty
     */
    value?: number;
}
/**
 *
 * @export
 * @interface IntegerPropertyAllOf
 */
export interface IntegerPropertyAllOf {
    /**
     *
     * @type {number}
     * @memberof IntegerPropertyAllOf
     */
    value?: number;
}
/**
 *
 * @export
 * @interface ItemConfiguration
 */
export interface ItemConfiguration extends Resource {
    /**
     *
     * @type {string}
     * @memberof ItemConfiguration
     */
    category?: string;
    /**
     *
     * @type {string}
     * @memberof ItemConfiguration
     */
    name?: string;
    /**
     *
     * @type {Array<Property>}
     * @memberof ItemConfiguration
     */
    props?: Array<Property>;
}
/**
 *
 * @export
 * @interface ItemConfigurationAllOf
 */
export interface ItemConfigurationAllOf {
    /**
     *
     * @type {string}
     * @memberof ItemConfigurationAllOf
     */
    category?: string;
    /**
     *
     * @type {string}
     * @memberof ItemConfigurationAllOf
     */
    name?: string;
    /**
     *
     * @type {Array<Property>}
     * @memberof ItemConfigurationAllOf
     */
    props?: Array<Property>;
}
/**
 *
 * @export
 * @interface Lane
 */
export interface Lane extends Configurable {
    /**
     *
     * @type {string}
     * @memberof Lane
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof Lane
     */
    destinationId?: string;
}
/**
 *
 * @export
 * @interface LaneAllOf
 */
export interface LaneAllOf {
    /**
     *
     * @type {string}
     * @memberof LaneAllOf
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof LaneAllOf
     */
    destinationId?: string;
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    password?: string;
}
/**
 *
 * @export
 * @interface Project
 */
export interface Project extends Resource {
    /**
     *
     * @type {string}
     * @memberof Project
     */
    name?: string;
    /**
     *
     * @type {Array<RoadMapDescription>}
     * @memberof Project
     */
    roadMaps?: Array<RoadMapDescription>;
}
/**
 *
 * @export
 * @interface ProjectDescription
 */
export interface ProjectDescription extends Resource {
    /**
     *
     * @type {string}
     * @memberof ProjectDescription
     */
    name?: string;
    /**
     *
     * @type {Array<RoadMapDescription>}
     * @memberof ProjectDescription
     */
    roadMaps?: Array<RoadMapDescription>;
}
/**
 *
 * @export
 * @interface ProjectDescriptionAllOf
 */
export interface ProjectDescriptionAllOf {
    /**
     *
     * @type {string}
     * @memberof ProjectDescriptionAllOf
     */
    name?: string;
    /**
     *
     * @type {Array<RoadMapDescription>}
     * @memberof ProjectDescriptionAllOf
     */
    roadMaps?: Array<RoadMapDescription>;
}
/**
 *
 * @export
 * @interface Property
 */
export interface Property {
    /**
     *
     * @type {string}
     * @memberof Property
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Property
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Property
     */
    propertyType: string;
    /**
     *
     * @type {boolean}
     * @memberof Property
     */
    valid?: boolean;
}
/**
 *
 * @export
 * @interface RelevantPoint
 */
export interface RelevantPoint extends Configurable {
    /**
     *
     * @type {Array<CrossingLink>}
     * @memberof RelevantPoint
     */
    links?: Array<CrossingLink>;
}
/**
 *
 * @export
 * @interface RelevantPointAllOf
 */
export interface RelevantPointAllOf {
    /**
     *
     * @type {Array<CrossingLink>}
     * @memberof RelevantPointAllOf
     */
    links?: Array<CrossingLink>;
}
/**
 *
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     *
     * @type {string}
     * @memberof Resource
     */
    uuid?: string;
    /**
     *
     * @type {string}
     * @memberof Resource
     */
    resourceType?: string;
}
/**
 *
 * @export
 * @interface RoadMap
 */
export interface RoadMap extends Resource {
    /**
     *
     * @type {string}
     * @memberof RoadMap
     */
    name?: string;
    /**
     *
     * @type {RoadMapContent}
     * @memberof RoadMap
     */
    content?: RoadMapContent;
    /**
     *
     * @type {Array<AnalysisDescription>}
     * @memberof RoadMap
     */
    analysis?: Array<AnalysisDescription>;
}
/**
 *
 * @export
 * @interface RoadMapAllOf
 */
export interface RoadMapAllOf {
    /**
     *
     * @type {string}
     * @memberof RoadMapAllOf
     */
    name?: string;
    /**
     *
     * @type {RoadMapContent}
     * @memberof RoadMapAllOf
     */
    content?: RoadMapContent;
    /**
     *
     * @type {Array<AnalysisDescription>}
     * @memberof RoadMapAllOf
     */
    analysis?: Array<AnalysisDescription>;
}
/**
 *
 * @export
 * @interface RoadMapContent
 */
export interface RoadMapContent {
    /**
     *
     * @type {Array<RelevantPoint>}
     * @memberof RoadMapContent
     */
    points?: Array<RelevantPoint>;
    /**
     *
     * @type {Array<Lane>}
     * @memberof RoadMapContent
     */
    lanes?: Array<Lane>;
}
/**
 *
 * @export
 * @interface RoadMapDescription
 */
export interface RoadMapDescription extends Resource {
    /**
     *
     * @type {string}
     * @memberof RoadMapDescription
     */
    name?: string;
}
/**
 *
 * @export
 * @interface RoadMapDescriptionAllOf
 */
export interface RoadMapDescriptionAllOf {
    /**
     *
     * @type {string}
     * @memberof RoadMapDescriptionAllOf
     */
    name?: string;
}
/**
 *
 * @export
 * @interface StringAnalysisResult
 */
export interface StringAnalysisResult extends AnalysisResult {
    /**
     *
     * @type {string}
     * @memberof StringAnalysisResult
     */
    message?: string;
}
/**
 *
 * @export
 * @interface StringAnalysisResultAllOf
 */
export interface StringAnalysisResultAllOf {
    /**
     *
     * @type {string}
     * @memberof StringAnalysisResultAllOf
     */
    message?: string;
}
/**
 *
 * @export
 * @interface StringProperty
 */
export interface StringProperty extends Property {
    /**
     *
     * @type {string}
     * @memberof StringProperty
     */
    value?: string;
}
/**
 *
 * @export
 * @interface StringPropertyAllOf
 */
export interface StringPropertyAllOf {
    /**
     *
     * @type {string}
     * @memberof StringPropertyAllOf
     */
    value?: string;
}
/**
 *
 * @export
 * @interface StringWrapper
 */
export interface StringWrapper {
    /**
     *
     * @type {string}
     * @memberof StringWrapper
     */
    value?: string;
}
/**
 *
 * @export
 * @interface UniformDistribution
 */
export interface UniformDistribution extends Distribution {
    /**
     *
     * @type {number}
     * @memberof UniformDistribution
     */
    left?: number;
    /**
     *
     * @type {number}
     * @memberof UniformDistribution
     */
    right?: number;
}
/**
 *
 * @export
 * @interface UniformDistributionAllOf
 */
export interface UniformDistributionAllOf {
    /**
     *
     * @type {number}
     * @memberof UniformDistributionAllOf
     */
    left?: number;
    /**
     *
     * @type {number}
     * @memberof UniformDistributionAllOf
     */
    right?: number;
}
/**
 *
 * @export
 * @interface UpdateConfigurationRequest
 */
export interface UpdateConfigurationRequest {
    /**
     *
     * @type {string}
     * @memberof UpdateConfigurationRequest
     */
    name?: string;
    /**
     *
     * @type {Array<Property>}
     * @memberof UpdateConfigurationRequest
     */
    props?: Array<Property>;
}
/**
 *
 * @export
 * @interface UpdateMapRequest
 */
export interface UpdateMapRequest {
    /**
     *
     * @type {RoadMap}
     * @memberof UpdateMapRequest
     */
    map?: RoadMap;
}
/**
 *
 * @export
 * @interface UpdateProjectRequest
 */
export interface UpdateProjectRequest {
    /**
     *
     * @type {string}
     * @memberof UpdateProjectRequest
     */
    name?: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User extends Resource {
    /**
     *
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     *
     * @type {Array<UserRole>}
     * @memberof User
     */
    roles: Array<UserRole>;
}
/**
 *
 * @export
 * @interface UserAllOf
 */
export interface UserAllOf {
    /**
     *
     * @type {string}
     * @memberof UserAllOf
     */
    username: string;
    /**
     *
     * @type {Array<UserRole>}
     * @memberof UserAllOf
     */
    roles: Array<UserRole>;
}
/**
 *
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     *
     * @type {string}
     * @memberof UserRequest
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof UserRequest
     */
    password?: string;
    /**
     *
     * @type {Array<UserRole>}
     * @memberof UserRequest
     */
    roles: Array<UserRole>;
}
/**
 *
 * @export
 * @enum {string}
 */
export enum UserRole {
    CLIENT = 'CLIENT',
    EXPERT = 'EXPERT',
    ADMIN = 'ADMIN'
}

/**
 *
 * @export
 * @interface XYAnalysisResult
 */
export interface XYAnalysisResult extends AnalysisResult {
    /**
     *
     * @type {string}
     * @memberof XYAnalysisResult
     */
    xLabel?: string;
    /**
     *
     * @type {string}
     * @memberof XYAnalysisResult
     */
    yLabel?: string;
    /**
     *
     * @type {Array<XYPoint>}
     * @memberof XYAnalysisResult
     */
    points?: Array<XYPoint>;
}
/**
 *
 * @export
 * @interface XYAnalysisResultAllOf
 */
export interface XYAnalysisResultAllOf {
    /**
     *
     * @type {string}
     * @memberof XYAnalysisResultAllOf
     */
    xLabel?: string;
    /**
     *
     * @type {string}
     * @memberof XYAnalysisResultAllOf
     */
    yLabel?: string;
    /**
     *
     * @type {Array<XYPoint>}
     * @memberof XYAnalysisResultAllOf
     */
    points?: Array<XYPoint>;
}
/**
 *
 * @export
 * @interface XYPoint
 */
export interface XYPoint {
    /**
     *
     * @type {number}
     * @memberof XYPoint
     */
    x?: number;
    /**
     *
     * @type {number}
     * @memberof XYPoint
     */
    y?: number;
}

/**
 * AnalysisApi - axios parameter creator
 * @export
 */
export const AnalysisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Gets available analysis for map
         * @param {string} projectId
         * @param {string} mapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableAnalysis(projectId: string, mapId: string, options: any = {}): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getAvailableAnalysis.');
            }
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling getAvailableAnalysis.');
            }
            const localVarPath = `/analysis/available`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Launch selected analysis
         * @param {AnalysisRequest} [analysisRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launchAnalysis(analysisRequest?: AnalysisRequest, options: any = {}): RequestArgs {
            const localVarPath = `/analysis/launch`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof analysisRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(analysisRequest !== undefined ? analysisRequest : {}) : (analysisRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalysisApi - functional programming interface
 * @export
 */
export const AnalysisApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Gets available analysis for map
         * @param {string} projectId
         * @param {string} mapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableAnalysis(projectId: string, mapId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnalysisType>> {
            const localVarAxiosArgs = AnalysisApiAxiosParamCreator(configuration).getAvailableAnalysis(projectId, mapId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Launch selected analysis
         * @param {AnalysisRequest} [analysisRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launchAnalysis(analysisRequest?: AnalysisRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalysisResponse> {
            const localVarAxiosArgs = AnalysisApiAxiosParamCreator(configuration).launchAnalysis(analysisRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AnalysisApi - factory interface
 * @export
 */
export const AnalysisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Gets available analysis for map
         * @param {string} projectId
         * @param {string} mapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableAnalysis(projectId: string, mapId: string, options?: any): AxiosPromise<Array<AnalysisType>> {
            return AnalysisApiFp(configuration).getAvailableAnalysis(projectId, mapId, options)(axios, basePath);
        },
        /**
         *
         * @summary Launch selected analysis
         * @param {AnalysisRequest} [analysisRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launchAnalysis(analysisRequest?: AnalysisRequest, options?: any): AxiosPromise<AnalysisResponse> {
            return AnalysisApiFp(configuration).launchAnalysis(analysisRequest, options)(axios, basePath);
        },
    };
};

/**
 * AnalysisApi - object-oriented interface
 * @export
 * @class AnalysisApi
 * @extends {BaseAPI}
 */
export class AnalysisApi extends BaseAPI {
    /**
     *
     * @summary Gets available analysis for map
     * @param {string} projectId
     * @param {string} mapId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public getAvailableAnalysis(projectId: string, mapId: string, options?: any) {
        return AnalysisApiFp(this.configuration).getAvailableAnalysis(projectId, mapId, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Launch selected analysis
     * @param {AnalysisRequest} [analysisRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public launchAnalysis(analysisRequest?: AnalysisRequest, options?: any) {
        return AnalysisApiFp(this.configuration).launchAnalysis(analysisRequest, options)(this.axios, this.basePath);
    }

}


/**
 * ConfigurationsApi - axios parameter creator
 * @export
 */
export const ConfigurationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Adds configuration to a category
         * @param {string} category
         * @param {CreateConfigurationRequest} [createConfigurationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConfiguration(category: string, createConfigurationRequest?: CreateConfigurationRequest, options: any = {}): RequestArgs {
            // verify required parameter 'category' is not null or undefined
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling addConfiguration.');
            }
            const localVarPath = `/configurations/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createConfigurationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createConfigurationRequest !== undefined ? createConfigurationRequest : {}) : (createConfigurationRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Edits a configuration
         * @param {string} configurationId
         * @param {UpdateConfigurationRequest} [updateConfigurationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editConfiguration(configurationId: string, updateConfigurationRequest?: UpdateConfigurationRequest, options: any = {}): RequestArgs {
            // verify required parameter 'configurationId' is not null or undefined
            if (configurationId === null || configurationId === undefined) {
                throw new RequiredError('configurationId','Required parameter configurationId was null or undefined when calling editConfiguration.');
            }
            const localVarPath = `/configurations/{configurationId}`
                .replace(`{${"configurationId"}}`, encodeURIComponent(String(configurationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateConfigurationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateConfigurationRequest !== undefined ? updateConfigurationRequest : {}) : (updateConfigurationRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets all configuration groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationCategories(options: any = {}): RequestArgs {
            const localVarPath = `/configurations/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get configurations given category
         * @param {string} [category]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurations(category?: string, options: any = {}): RequestArgs {
            const localVarPath = `/configurations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get properties given category
         * @param {string} [category]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertiesSuggestions(category?: string, options: any = {}): RequestArgs {
            const localVarPath = `/configurations/suggestions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Removes a configuration
         * @param {string} configurationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeConfiguration(configurationId: string, options: any = {}): RequestArgs {
            // verify required parameter 'configurationId' is not null or undefined
            if (configurationId === null || configurationId === undefined) {
                throw new RequiredError('configurationId','Required parameter configurationId was null or undefined when calling removeConfiguration.');
            }
            const localVarPath = `/configurations/{configurationId}`
                .replace(`{${"configurationId"}}`, encodeURIComponent(String(configurationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigurationsApi - functional programming interface
 * @export
 */
export const ConfigurationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Adds configuration to a category
         * @param {string} category
         * @param {CreateConfigurationRequest} [createConfigurationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConfiguration(category: string, createConfigurationRequest?: CreateConfigurationRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringWrapper> {
            const localVarAxiosArgs = ConfigurationsApiAxiosParamCreator(configuration).addConfiguration(category, createConfigurationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Edits a configuration
         * @param {string} configurationId
         * @param {UpdateConfigurationRequest} [updateConfigurationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editConfiguration(configurationId: string, updateConfigurationRequest?: UpdateConfigurationRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringWrapper> {
            const localVarAxiosArgs = ConfigurationsApiAxiosParamCreator(configuration).editConfiguration(configurationId, updateConfigurationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets all configuration groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationCategories(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConfigurableCategory>> {
            const localVarAxiosArgs = ConfigurationsApiAxiosParamCreator(configuration).getConfigurationCategories(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get configurations given category
         * @param {string} [category]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurations(category?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemConfiguration>> {
            const localVarAxiosArgs = ConfigurationsApiAxiosParamCreator(configuration).getConfigurations(category, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get properties given category
         * @param {string} [category]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertiesSuggestions(category?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Property>> {
            const localVarAxiosArgs = ConfigurationsApiAxiosParamCreator(configuration).getPropertiesSuggestions(category, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Removes a configuration
         * @param {string} configurationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeConfiguration(configurationId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringWrapper> {
            const localVarAxiosArgs = ConfigurationsApiAxiosParamCreator(configuration).removeConfiguration(configurationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConfigurationsApi - factory interface
 * @export
 */
export const ConfigurationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Adds configuration to a category
         * @param {string} category
         * @param {CreateConfigurationRequest} [createConfigurationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConfiguration(category: string, createConfigurationRequest?: CreateConfigurationRequest, options?: any): AxiosPromise<StringWrapper> {
            return ConfigurationsApiFp(configuration).addConfiguration(category, createConfigurationRequest, options)(axios, basePath);
        },
        /**
         *
         * @summary Edits a configuration
         * @param {string} configurationId
         * @param {UpdateConfigurationRequest} [updateConfigurationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editConfiguration(configurationId: string, updateConfigurationRequest?: UpdateConfigurationRequest, options?: any): AxiosPromise<StringWrapper> {
            return ConfigurationsApiFp(configuration).editConfiguration(configurationId, updateConfigurationRequest, options)(axios, basePath);
        },
        /**
         *
         * @summary Gets all configuration groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationCategories(options?: any): AxiosPromise<Array<ConfigurableCategory>> {
            return ConfigurationsApiFp(configuration).getConfigurationCategories(options)(axios, basePath);
        },
        /**
         *
         * @summary Get configurations given category
         * @param {string} [category]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurations(category?: string, options?: any): AxiosPromise<Array<ItemConfiguration>> {
            return ConfigurationsApiFp(configuration).getConfigurations(category, options)(axios, basePath);
        },
        /**
         *
         * @summary Get properties given category
         * @param {string} [category]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertiesSuggestions(category?: string, options?: any): AxiosPromise<Array<Property>> {
            return ConfigurationsApiFp(configuration).getPropertiesSuggestions(category, options)(axios, basePath);
        },
        /**
         *
         * @summary Removes a configuration
         * @param {string} configurationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeConfiguration(configurationId: string, options?: any): AxiosPromise<StringWrapper> {
            return ConfigurationsApiFp(configuration).removeConfiguration(configurationId, options)(axios, basePath);
        },
    };
};

/**
 * ConfigurationsApi - object-oriented interface
 * @export
 * @class ConfigurationsApi
 * @extends {BaseAPI}
 */
export class ConfigurationsApi extends BaseAPI {
    /**
     *
     * @summary Adds configuration to a category
     * @param {string} category
     * @param {CreateConfigurationRequest} [createConfigurationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    public addConfiguration(category: string, createConfigurationRequest?: CreateConfigurationRequest, options?: any) {
        return ConfigurationsApiFp(this.configuration).addConfiguration(category, createConfigurationRequest, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Edits a configuration
     * @param {string} configurationId
     * @param {UpdateConfigurationRequest} [updateConfigurationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    public editConfiguration(configurationId: string, updateConfigurationRequest?: UpdateConfigurationRequest, options?: any) {
        return ConfigurationsApiFp(this.configuration).editConfiguration(configurationId, updateConfigurationRequest, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Gets all configuration groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    public getConfigurationCategories(options?: any) {
        return ConfigurationsApiFp(this.configuration).getConfigurationCategories(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Get configurations given category
     * @param {string} [category]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    public getConfigurations(category?: string, options?: any) {
        return ConfigurationsApiFp(this.configuration).getConfigurations(category, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Get properties given category
     * @param {string} [category]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    public getPropertiesSuggestions(category?: string, options?: any) {
        return ConfigurationsApiFp(this.configuration).getPropertiesSuggestions(category, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Removes a configuration
     * @param {string} configurationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    public removeConfiguration(configurationId: string, options?: any) {
        return ConfigurationsApiFp(this.configuration).removeConfiguration(configurationId, options)(this.axios, this.basePath);
    }

}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Gets logged user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logged(options: any = {}): RequestArgs {
            const localVarPath = `/users/logged`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Logs a user in
         * @param {LoginRequest} [loginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest?: LoginRequest, options: any = {}): RequestArgs {
            const localVarPath = `/users/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : (loginRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Gets logged user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logged(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).logged(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Logs a user in
         * @param {LoginRequest} [loginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest?: LoginRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringWrapper> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).login(loginRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Gets logged user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logged(options?: any): AxiosPromise<User> {
            return DefaultApiFp(configuration).logged(options)(axios, basePath);
        },
        /**
         *
         * @summary Logs a user in
         * @param {LoginRequest} [loginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest?: LoginRequest, options?: any): AxiosPromise<StringWrapper> {
            return DefaultApiFp(configuration).login(loginRequest, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Gets logged user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logged(options?: any) {
        return DefaultApiFp(this.configuration).logged(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Logs a user in
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(loginRequest?: LoginRequest, options?: any) {
        return DefaultApiFp(this.configuration).login(loginRequest, options)(this.axios, this.basePath);
    }

}


/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Creates a map
         * @param {string} projectId
         * @param {CreateMapRequest} [createMapRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMap(projectId: string, createMapRequest?: CreateMapRequest, options: any = {}): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling createMap.');
            }
            const localVarPath = `/projects/{projectId}/maps`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createMapRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createMapRequest !== undefined ? createMapRequest : {}) : (createMapRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates a new project
         * @param {CreateProjectRequest} [createProjectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(createProjectRequest?: CreateProjectRequest, options: any = {}): RequestArgs {
            const localVarPath = `/projects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createProjectRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createProjectRequest !== undefined ? createProjectRequest : {}) : (createProjectRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes an analysis
         * @param {string} projectId
         * @param {string} mapId
         * @param {string} analysisId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnalysis(projectId: string, mapId: string, analysisId: string, options: any = {}): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling deleteAnalysis.');
            }
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling deleteAnalysis.');
            }
            // verify required parameter 'analysisId' is not null or undefined
            if (analysisId === null || analysisId === undefined) {
                throw new RequiredError('analysisId','Required parameter analysisId was null or undefined when calling deleteAnalysis.');
            }
            const localVarPath = `/projects/{projectId}/maps/{mapId}/{analysisId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)))
                .replace(`{${"analysisId"}}`, encodeURIComponent(String(analysisId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a map
         * @param {string} projectId
         * @param {string} mapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMap(projectId: string, mapId: string, options: any = {}): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling deleteMap.');
            }
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling deleteMap.');
            }
            const localVarPath = `/projects/{projectId}/maps/{mapId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a project
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProject.');
            }
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets an analysis
         * @param {string} projectId
         * @param {string} mapId
         * @param {string} analysisId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalysis(projectId: string, mapId: string, analysisId: string, options: any = {}): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getAnalysis.');
            }
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling getAnalysis.');
            }
            // verify required parameter 'analysisId' is not null or undefined
            if (analysisId === null || analysisId === undefined) {
                throw new RequiredError('analysisId','Required parameter analysisId was null or undefined when calling getAnalysis.');
            }
            const localVarPath = `/projects/{projectId}/maps/{mapId}/{analysisId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)))
                .replace(`{${"analysisId"}}`, encodeURIComponent(String(analysisId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets a map
         * @param {string} projectId
         * @param {string} mapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMap(projectId: string, mapId: string, options: any = {}): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getMap.');
            }
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling getMap.');
            }
            const localVarPath = `/projects/{projectId}/maps/{mapId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets project
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProject.');
            }
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets user projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(options: any = {}): RequestArgs {
            const localVarPath = `/projects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates a map
         * @param {string} projectId
         * @param {string} mapId
         * @param {UpdateMapRequest} [updateMapRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMap(projectId: string, mapId: string, updateMapRequest?: UpdateMapRequest, options: any = {}): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling updateMap.');
            }
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling updateMap.');
            }
            const localVarPath = `/projects/{projectId}/maps/{mapId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateMapRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateMapRequest !== undefined ? updateMapRequest : {}) : (updateMapRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates a project
         * @param {string} id
         * @param {UpdateProjectRequest} [updateProjectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(id: string, updateProjectRequest?: UpdateProjectRequest, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateProject.');
            }
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateProjectRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateProjectRequest !== undefined ? updateProjectRequest : {}) : (updateProjectRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Creates a map
         * @param {string} projectId
         * @param {CreateMapRequest} [createMapRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMap(projectId: string, createMapRequest?: CreateMapRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoadMap> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).createMap(projectId, createMapRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Creates a new project
         * @param {CreateProjectRequest} [createProjectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(createProjectRequest?: CreateProjectRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).createProject(createProjectRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Deletes an analysis
         * @param {string} projectId
         * @param {string} mapId
         * @param {string} analysisId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnalysis(projectId: string, mapId: string, analysisId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringWrapper> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).deleteAnalysis(projectId, mapId, analysisId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Deletes a map
         * @param {string} projectId
         * @param {string} mapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMap(projectId: string, mapId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).deleteMap(projectId, mapId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Deletes a project
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringWrapper> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).deleteProject(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets an analysis
         * @param {string} projectId
         * @param {string} mapId
         * @param {string} analysisId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalysis(projectId: string, mapId: string, analysisId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Analysis> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).getAnalysis(projectId, mapId, analysisId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets a map
         * @param {string} projectId
         * @param {string} mapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMap(projectId: string, mapId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoadMap> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).getMap(projectId, mapId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets project
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).getProject(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets user projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectDescription>> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).getProjects(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Updates a map
         * @param {string} projectId
         * @param {string} mapId
         * @param {UpdateMapRequest} [updateMapRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMap(projectId: string, mapId: string, updateMapRequest?: UpdateMapRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).updateMap(projectId, mapId, updateMapRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Updates a project
         * @param {string} id
         * @param {UpdateProjectRequest} [updateProjectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(id: string, updateProjectRequest?: UpdateProjectRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).updateProject(id, updateProjectRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Creates a map
         * @param {string} projectId
         * @param {CreateMapRequest} [createMapRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMap(projectId: string, createMapRequest?: CreateMapRequest, options?: any): AxiosPromise<RoadMap> {
            return ProjectsApiFp(configuration).createMap(projectId, createMapRequest, options)(axios, basePath);
        },
        /**
         *
         * @summary Creates a new project
         * @param {CreateProjectRequest} [createProjectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(createProjectRequest?: CreateProjectRequest, options?: any): AxiosPromise<void> {
            return ProjectsApiFp(configuration).createProject(createProjectRequest, options)(axios, basePath);
        },
        /**
         *
         * @summary Deletes an analysis
         * @param {string} projectId
         * @param {string} mapId
         * @param {string} analysisId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnalysis(projectId: string, mapId: string, analysisId: string, options?: any): AxiosPromise<StringWrapper> {
            return ProjectsApiFp(configuration).deleteAnalysis(projectId, mapId, analysisId, options)(axios, basePath);
        },
        /**
         *
         * @summary Deletes a map
         * @param {string} projectId
         * @param {string} mapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMap(projectId: string, mapId: string, options?: any): AxiosPromise<void> {
            return ProjectsApiFp(configuration).deleteMap(projectId, mapId, options)(axios, basePath);
        },
        /**
         *
         * @summary Deletes a project
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(id: string, options?: any): AxiosPromise<StringWrapper> {
            return ProjectsApiFp(configuration).deleteProject(id, options)(axios, basePath);
        },
        /**
         *
         * @summary Gets an analysis
         * @param {string} projectId
         * @param {string} mapId
         * @param {string} analysisId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalysis(projectId: string, mapId: string, analysisId: string, options?: any): AxiosPromise<Analysis> {
            return ProjectsApiFp(configuration).getAnalysis(projectId, mapId, analysisId, options)(axios, basePath);
        },
        /**
         *
         * @summary Gets a map
         * @param {string} projectId
         * @param {string} mapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMap(projectId: string, mapId: string, options?: any): AxiosPromise<RoadMap> {
            return ProjectsApiFp(configuration).getMap(projectId, mapId, options)(axios, basePath);
        },
        /**
         *
         * @summary Gets project
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(id: string, options?: any): AxiosPromise<Project> {
            return ProjectsApiFp(configuration).getProject(id, options)(axios, basePath);
        },
        /**
         *
         * @summary Gets user projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(options?: any): AxiosPromise<Array<ProjectDescription>> {
            return ProjectsApiFp(configuration).getProjects(options)(axios, basePath);
        },
        /**
         *
         * @summary Updates a map
         * @param {string} projectId
         * @param {string} mapId
         * @param {UpdateMapRequest} [updateMapRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMap(projectId: string, mapId: string, updateMapRequest?: UpdateMapRequest, options?: any): AxiosPromise<void> {
            return ProjectsApiFp(configuration).updateMap(projectId, mapId, updateMapRequest, options)(axios, basePath);
        },
        /**
         *
         * @summary Updates a project
         * @param {string} id
         * @param {UpdateProjectRequest} [updateProjectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(id: string, updateProjectRequest?: UpdateProjectRequest, options?: any): AxiosPromise<void> {
            return ProjectsApiFp(configuration).updateProject(id, updateProjectRequest, options)(axios, basePath);
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     *
     * @summary Creates a map
     * @param {string} projectId
     * @param {CreateMapRequest} [createMapRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public createMap(projectId: string, createMapRequest?: CreateMapRequest, options?: any) {
        return ProjectsApiFp(this.configuration).createMap(projectId, createMapRequest, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Creates a new project
     * @param {CreateProjectRequest} [createProjectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public createProject(createProjectRequest?: CreateProjectRequest, options?: any) {
        return ProjectsApiFp(this.configuration).createProject(createProjectRequest, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Deletes an analysis
     * @param {string} projectId
     * @param {string} mapId
     * @param {string} analysisId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteAnalysis(projectId: string, mapId: string, analysisId: string, options?: any) {
        return ProjectsApiFp(this.configuration).deleteAnalysis(projectId, mapId, analysisId, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Deletes a map
     * @param {string} projectId
     * @param {string} mapId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteMap(projectId: string, mapId: string, options?: any) {
        return ProjectsApiFp(this.configuration).deleteMap(projectId, mapId, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Deletes a project
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteProject(id: string, options?: any) {
        return ProjectsApiFp(this.configuration).deleteProject(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Gets an analysis
     * @param {string} projectId
     * @param {string} mapId
     * @param {string} analysisId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getAnalysis(projectId: string, mapId: string, analysisId: string, options?: any) {
        return ProjectsApiFp(this.configuration).getAnalysis(projectId, mapId, analysisId, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Gets a map
     * @param {string} projectId
     * @param {string} mapId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getMap(projectId: string, mapId: string, options?: any) {
        return ProjectsApiFp(this.configuration).getMap(projectId, mapId, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Gets project
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProject(id: string, options?: any) {
        return ProjectsApiFp(this.configuration).getProject(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Gets user projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjects(options?: any) {
        return ProjectsApiFp(this.configuration).getProjects(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Updates a map
     * @param {string} projectId
     * @param {string} mapId
     * @param {UpdateMapRequest} [updateMapRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public updateMap(projectId: string, mapId: string, updateMapRequest?: UpdateMapRequest, options?: any) {
        return ProjectsApiFp(this.configuration).updateMap(projectId, mapId, updateMapRequest, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Updates a project
     * @param {string} id
     * @param {UpdateProjectRequest} [updateProjectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public updateProject(id: string, updateProjectRequest?: UpdateProjectRequest, options?: any) {
        return ProjectsApiFp(this.configuration).updateProject(id, updateProjectRequest, options)(this.axios, this.basePath);
    }

}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Creates a new user
         * @param {UserRequest} [userRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userRequest?: UserRequest, options: any = {}): RequestArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userRequest !== undefined ? userRequest : {}) : (userRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Edit user\'s password
         * @param {string} id
         * @param {ChangePasswordRequest} [changePasswordRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPassword(id: string, changePasswordRequest?: ChangePasswordRequest, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editPassword.');
            }
            const localVarPath = `/users/{id}/password`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof changePasswordRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(changePasswordRequest !== undefined ? changePasswordRequest : {}) : (changePasswordRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Edit user\'s roles
         * @param {string} id
         * @param {Array<UserRole>} [userRole]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editRoles(id: string, userRole?: Array<UserRole>, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editRoles.');
            }
            const localVarPath = `/users/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userRole !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userRole !== undefined ? userRole : {}) : (userRole || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Enable or disable a user
         * @param {string} id
         * @param {BooleanWrapper} [booleanWrapper]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableUser(id: string, booleanWrapper?: BooleanWrapper, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling enableUser.');
            }
            const localVarPath = `/users/{id}/enable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof booleanWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(booleanWrapper !== undefined ? booleanWrapper : {}) : (booleanWrapper || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets a user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUser.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets all it.tramways.user.users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options: any = {}): RequestArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Reset user\'s password
         * @param {string} id
         * @param {StringWrapper} [stringWrapper]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUser(id: string, stringWrapper?: StringWrapper, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling resetUser.');
            }
            const localVarPath = `/users/{id}/reset`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof stringWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(stringWrapper !== undefined ? stringWrapper : {}) : (stringWrapper || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Creates a new user
         * @param {UserRequest} [userRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userRequest?: UserRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).createUser(userRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Deletes a user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteUser(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Edit user\'s password
         * @param {string} id
         * @param {ChangePasswordRequest} [changePasswordRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPassword(id: string, changePasswordRequest?: ChangePasswordRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).editPassword(id, changePasswordRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Edit user\'s roles
         * @param {string} id
         * @param {Array<UserRole>} [userRole]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editRoles(id: string, userRole?: Array<UserRole>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).editRoles(id, userRole, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Enable or disable a user
         * @param {string} id
         * @param {BooleanWrapper} [booleanWrapper]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableUser(id: string, booleanWrapper?: BooleanWrapper, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).enableUser(id, booleanWrapper, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets a user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getUser(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets all it.tramways.user.users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getUsers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Reset user\'s password
         * @param {string} id
         * @param {StringWrapper} [stringWrapper]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUser(id: string, stringWrapper?: StringWrapper, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).resetUser(id, stringWrapper, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Creates a new user
         * @param {UserRequest} [userRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userRequest?: UserRequest, options?: any): AxiosPromise<User> {
            return UsersApiFp(configuration).createUser(userRequest, options)(axios, basePath);
        },
        /**
         *
         * @summary Deletes a user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: string, options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).deleteUser(id, options)(axios, basePath);
        },
        /**
         *
         * @summary Edit user\'s password
         * @param {string} id
         * @param {ChangePasswordRequest} [changePasswordRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPassword(id: string, changePasswordRequest?: ChangePasswordRequest, options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).editPassword(id, changePasswordRequest, options)(axios, basePath);
        },
        /**
         *
         * @summary Edit user\'s roles
         * @param {string} id
         * @param {Array<UserRole>} [userRole]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editRoles(id: string, userRole?: Array<UserRole>, options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).editRoles(id, userRole, options)(axios, basePath);
        },
        /**
         *
         * @summary Enable or disable a user
         * @param {string} id
         * @param {BooleanWrapper} [booleanWrapper]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableUser(id: string, booleanWrapper?: BooleanWrapper, options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).enableUser(id, booleanWrapper, options)(axios, basePath);
        },
        /**
         *
         * @summary Gets a user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options?: any): AxiosPromise<User> {
            return UsersApiFp(configuration).getUser(id, options)(axios, basePath);
        },
        /**
         *
         * @summary Gets all it.tramways.user.users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<User>> {
            return UsersApiFp(configuration).getUsers(options)(axios, basePath);
        },
        /**
         *
         * @summary Reset user\'s password
         * @param {string} id
         * @param {StringWrapper} [stringWrapper]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUser(id: string, stringWrapper?: StringWrapper, options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).resetUser(id, stringWrapper, options)(axios, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     *
     * @summary Creates a new user
     * @param {UserRequest} [userRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(userRequest?: UserRequest, options?: any) {
        return UsersApiFp(this.configuration).createUser(userRequest, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Deletes a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(id: string, options?: any) {
        return UsersApiFp(this.configuration).deleteUser(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Edit user\'s password
     * @param {string} id
     * @param {ChangePasswordRequest} [changePasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public editPassword(id: string, changePasswordRequest?: ChangePasswordRequest, options?: any) {
        return UsersApiFp(this.configuration).editPassword(id, changePasswordRequest, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Edit user\'s roles
     * @param {string} id
     * @param {Array<UserRole>} [userRole]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public editRoles(id: string, userRole?: Array<UserRole>, options?: any) {
        return UsersApiFp(this.configuration).editRoles(id, userRole, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Enable or disable a user
     * @param {string} id
     * @param {BooleanWrapper} [booleanWrapper]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public enableUser(id: string, booleanWrapper?: BooleanWrapper, options?: any) {
        return UsersApiFp(this.configuration).enableUser(id, booleanWrapper, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Gets a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(id: string, options?: any) {
        return UsersApiFp(this.configuration).getUser(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Gets all it.tramways.user.users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(options?: any) {
        return UsersApiFp(this.configuration).getUsers(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Reset user\'s password
     * @param {string} id
     * @param {StringWrapper} [stringWrapper]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public resetUser(id: string, stringWrapper?: StringWrapper, options?: any) {
        return UsersApiFp(this.configuration).resetUser(id, stringWrapper, options)(this.axios, this.basePath);
    }

}


