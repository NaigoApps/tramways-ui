// tslint:disable
/**
 * Tramways Analysis API
 * Tramways Analysis API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Analysis
 */
export interface Analysis {
    /**
     * 
     * @type {string}
     * @memberof Analysis
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof Analysis
     */
    name?: string;
    /**
     * 
     * @type {AnalysisStatus}
     * @memberof Analysis
     */
    status?: AnalysisStatus;
    /**
     * 
     * @type {AnalysisResult}
     * @memberof Analysis
     */
    result?: AnalysisResult;
}
/**
 * 
 * @export
 * @interface AnalysisDescription
 */
export interface AnalysisDescription {
    /**
     * 
     * @type {string}
     * @memberof AnalysisDescription
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisDescription
     */
    name?: string;
    /**
     * 
     * @type {AnalysisStatus}
     * @memberof AnalysisDescription
     */
    status?: AnalysisStatus;
}
/**
 * 
 * @export
 * @interface AnalysisRequest
 */
export interface AnalysisRequest {
    /**
     * 
     * @type {string}
     * @memberof AnalysisRequest
     */
    analysisTypeId?: string;
    /**
     * 
     * @type {Array<Property>}
     * @memberof AnalysisRequest
     */
    parameters?: Array<Property>;
}
/**
 * 
 * @export
 * @interface AnalysisResponse
 */
export interface AnalysisResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof AnalysisResponse
     */
    warnings?: Array<string>;
    /**
     * 
     * @type {Array<Property>}
     * @memberof AnalysisResponse
     */
    parameters?: Array<Property>;
    /**
     * 
     * @type {boolean}
     * @memberof AnalysisResponse
     */
    ok?: boolean;
}
/**
 * 
 * @export
 * @interface AnalysisResult
 */
export interface AnalysisResult {
    /**
     * 
     * @type {AnalysisResultType}
     * @memberof AnalysisResult
     */
    resultType?: AnalysisResultType;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum AnalysisResultType {
    XY = 'XY',
    STRING = 'STRING'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum AnalysisStatus {
    INPROGRESS = 'IN_PROGRESS',
    DONE = 'DONE',
    ERROR = 'ERROR'
}

/**
 * 
 * @export
 * @interface AnalysisType
 */
export interface AnalysisType {
    /**
     * 
     * @type {string}
     * @memberof AnalysisType
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisType
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface Property
 */
export interface Property {
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    propertyType: string;
    /**
     * 
     * @type {boolean}
     * @memberof Property
     */
    valid?: boolean;
}
/**
 * 
 * @export
 * @interface StringAnalysisResult
 */
export interface StringAnalysisResult extends AnalysisResult {
    /**
     * 
     * @type {string}
     * @memberof StringAnalysisResult
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface StringAnalysisResultAllOf
 */
export interface StringAnalysisResultAllOf {
    /**
     * 
     * @type {string}
     * @memberof StringAnalysisResultAllOf
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface XYAnalysisResult
 */
export interface XYAnalysisResult extends AnalysisResult {
    /**
     * 
     * @type {string}
     * @memberof XYAnalysisResult
     */
    xLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof XYAnalysisResult
     */
    yLabel?: string;
    /**
     * 
     * @type {Array<XYPoint>}
     * @memberof XYAnalysisResult
     */
    points?: Array<XYPoint>;
}
/**
 * 
 * @export
 * @interface XYAnalysisResultAllOf
 */
export interface XYAnalysisResultAllOf {
    /**
     * 
     * @type {string}
     * @memberof XYAnalysisResultAllOf
     */
    xLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof XYAnalysisResultAllOf
     */
    yLabel?: string;
    /**
     * 
     * @type {Array<XYPoint>}
     * @memberof XYAnalysisResultAllOf
     */
    points?: Array<XYPoint>;
}
/**
 * 
 * @export
 * @interface XYPoint
 */
export interface XYPoint {
    /**
     * 
     * @type {number}
     * @memberof XYPoint
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof XYPoint
     */
    y?: number;
}

/**
 * AnalysisApi - axios parameter creator
 * @export
 */
export const AnalysisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an analysis
         * @param {string} mapId 
         * @param {string} analysisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnalysis(mapId: string, analysisId: string, options: any = {}): RequestArgs {
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling deleteAnalysis.');
            }
            // verify required parameter 'analysisId' is not null or undefined
            if (analysisId === null || analysisId === undefined) {
                throw new RequiredError('analysisId','Required parameter analysisId was null or undefined when calling deleteAnalysis.');
            }
            const localVarPath = `/analysis/maps/{mapId}/{analysisId}`
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)))
                .replace(`{${"analysisId"}}`, encodeURIComponent(String(analysisId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets an analysis
         * @param {string} mapId 
         * @param {string} analysisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalysis(mapId: string, analysisId: string, options: any = {}): RequestArgs {
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling getAnalysis.');
            }
            // verify required parameter 'analysisId' is not null or undefined
            if (analysisId === null || analysisId === undefined) {
                throw new RequiredError('analysisId','Required parameter analysisId was null or undefined when calling getAnalysis.');
            }
            const localVarPath = `/analysis/maps/{mapId}/{analysisId}`
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)))
                .replace(`{${"analysisId"}}`, encodeURIComponent(String(analysisId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets available analysis for map
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableAnalysis(projectId: string, mapId: string, options: any = {}): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getAvailableAnalysis.');
            }
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling getAvailableAnalysis.');
            }
            const localVarPath = `/analysis/available`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a map analysis
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapAnalysis(mapId: string, options: any = {}): RequestArgs {
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling getMapAnalysis.');
            }
            const localVarPath = `/analysis/maps/{mapId}`
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Launch selected analysis
         * @param {string} mapId 
         * @param {AnalysisRequest} [analysisRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launchAnalysis(mapId: string, analysisRequest?: AnalysisRequest, options: any = {}): RequestArgs {
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling launchAnalysis.');
            }
            const localVarPath = `/analysis/maps/{mapId}/launch`
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof analysisRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(analysisRequest !== undefined ? analysisRequest : {}) : (analysisRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalysisApi - functional programming interface
 * @export
 */
export const AnalysisApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an analysis
         * @param {string} mapId 
         * @param {string} analysisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnalysis(mapId: string, analysisId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AnalysisApiAxiosParamCreator(configuration).deleteAnalysis(mapId, analysisId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets an analysis
         * @param {string} mapId 
         * @param {string} analysisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalysis(mapId: string, analysisId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Analysis> {
            const localVarAxiosArgs = AnalysisApiAxiosParamCreator(configuration).getAnalysis(mapId, analysisId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets available analysis for map
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableAnalysis(projectId: string, mapId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnalysisType>> {
            const localVarAxiosArgs = AnalysisApiAxiosParamCreator(configuration).getAvailableAnalysis(projectId, mapId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets a map analysis
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapAnalysis(mapId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnalysisDescription>> {
            const localVarAxiosArgs = AnalysisApiAxiosParamCreator(configuration).getMapAnalysis(mapId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Launch selected analysis
         * @param {string} mapId 
         * @param {AnalysisRequest} [analysisRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launchAnalysis(mapId: string, analysisRequest?: AnalysisRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalysisResponse> {
            const localVarAxiosArgs = AnalysisApiAxiosParamCreator(configuration).launchAnalysis(mapId, analysisRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AnalysisApi - factory interface
 * @export
 */
export const AnalysisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Deletes an analysis
         * @param {string} mapId 
         * @param {string} analysisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnalysis(mapId: string, analysisId: string, options?: any): AxiosPromise<void> {
            return AnalysisApiFp(configuration).deleteAnalysis(mapId, analysisId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets an analysis
         * @param {string} mapId 
         * @param {string} analysisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalysis(mapId: string, analysisId: string, options?: any): AxiosPromise<Analysis> {
            return AnalysisApiFp(configuration).getAnalysis(mapId, analysisId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets available analysis for map
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableAnalysis(projectId: string, mapId: string, options?: any): AxiosPromise<Array<AnalysisType>> {
            return AnalysisApiFp(configuration).getAvailableAnalysis(projectId, mapId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets a map analysis
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapAnalysis(mapId: string, options?: any): AxiosPromise<Array<AnalysisDescription>> {
            return AnalysisApiFp(configuration).getMapAnalysis(mapId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Launch selected analysis
         * @param {string} mapId 
         * @param {AnalysisRequest} [analysisRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launchAnalysis(mapId: string, analysisRequest?: AnalysisRequest, options?: any): AxiosPromise<AnalysisResponse> {
            return AnalysisApiFp(configuration).launchAnalysis(mapId, analysisRequest, options)(axios, basePath);
        },
    };
};

/**
 * AnalysisApi - object-oriented interface
 * @export
 * @class AnalysisApi
 * @extends {BaseAPI}
 */
export class AnalysisApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an analysis
     * @param {string} mapId 
     * @param {string} analysisId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public deleteAnalysis(mapId: string, analysisId: string, options?: any) {
        return AnalysisApiFp(this.configuration).deleteAnalysis(mapId, analysisId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets an analysis
     * @param {string} mapId 
     * @param {string} analysisId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public getAnalysis(mapId: string, analysisId: string, options?: any) {
        return AnalysisApiFp(this.configuration).getAnalysis(mapId, analysisId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets available analysis for map
     * @param {string} projectId 
     * @param {string} mapId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public getAvailableAnalysis(projectId: string, mapId: string, options?: any) {
        return AnalysisApiFp(this.configuration).getAvailableAnalysis(projectId, mapId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets a map analysis
     * @param {string} mapId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public getMapAnalysis(mapId: string, options?: any) {
        return AnalysisApiFp(this.configuration).getMapAnalysis(mapId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Launch selected analysis
     * @param {string} mapId 
     * @param {AnalysisRequest} [analysisRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public launchAnalysis(mapId: string, analysisRequest?: AnalysisRequest, options?: any) {
        return AnalysisApiFp(this.configuration).launchAnalysis(mapId, analysisRequest, options)(this.axios, this.basePath);
    }

}


