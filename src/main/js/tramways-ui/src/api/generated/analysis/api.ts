/* tslint:disable */
/* eslint-disable */
/**
 * Tramways Analysis API
 * Tramways Analysis API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Analysis
 */
export interface Analysis {
    /**
     * 
     * @type {string}
     * @memberof Analysis
     */
    name?: string;
    /**
     * 
     * @type {AnalysisStatus}
     * @memberof Analysis
     */
    status?: AnalysisStatus;
    /**
     * 
     * @type {object}
     * @memberof Analysis
     */
    result?: object;
}
/**
 * 
 * @export
 * @interface AnalysisDescription
 */
export interface AnalysisDescription {
    /**
     * 
     * @type {string}
     * @memberof AnalysisDescription
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisDescription
     */
    name?: string;
    /**
     * 
     * @type {AnalysisStatus}
     * @memberof AnalysisDescription
     */
    status?: AnalysisStatus;
}
/**
 * 
 * @export
 * @interface AnalysisRequest
 */
export interface AnalysisRequest {
    /**
     * 
     * @type {string}
     * @memberof AnalysisRequest
     */
    projectId?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisRequest
     */
    mapId?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisRequest
     */
    analysisTypeId?: string;
    /**
     * 
     * @type {Array<Property>}
     * @memberof AnalysisRequest
     */
    parameters?: Array<Property>;
}
/**
 * 
 * @export
 * @interface AnalysisResponse
 */
export interface AnalysisResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof AnalysisResponse
     */
    warnings?: Array<string>;
    /**
     * 
     * @type {Array<Property>}
     * @memberof AnalysisResponse
     */
    parameters?: Array<Property>;
    /**
     * 
     * @type {boolean}
     * @memberof AnalysisResponse
     */
    ok?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum AnalysisStatus {
    InProgress = 'IN_PROGRESS',
    Done = 'DONE',
    Error = 'ERROR'
}

/**
 * 
 * @export
 * @interface AnalysisType
 */
export interface AnalysisType {
    /**
     * 
     * @type {string}
     * @memberof AnalysisType
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisType
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface ChoiceElement
 */
export interface ChoiceElement {
    /**
     * 
     * @type {string}
     * @memberof ChoiceElement
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ChoiceElement
     */
    label?: string;
}
/**
 * 
 * @export
 * @interface ChoiceProperty
 */
export interface ChoiceProperty extends Property {
    /**
     * 
     * @type {Array<ChoiceElement>}
     * @memberof ChoiceProperty
     */
    choices?: Array<ChoiceElement>;
    /**
     * 
     * @type {string}
     * @memberof ChoiceProperty
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface ChoicePropertyAllOf
 */
export interface ChoicePropertyAllOf {
    /**
     * 
     * @type {Array<ChoiceElement>}
     * @memberof ChoicePropertyAllOf
     */
    choices?: Array<ChoiceElement>;
    /**
     * 
     * @type {string}
     * @memberof ChoicePropertyAllOf
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface DecimalProperty
 */
export interface DecimalProperty extends Property {
    /**
     * 
     * @type {number}
     * @memberof DecimalProperty
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface DecimalPropertyAllOf
 */
export interface DecimalPropertyAllOf {
    /**
     * 
     * @type {number}
     * @memberof DecimalPropertyAllOf
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface Distribution
 */
export interface Distribution {
    /**
     * 
     * @type {DistributionType}
     * @memberof Distribution
     */
    distributionType: DistributionType;
}
/**
 * 
 * @export
 * @interface DistributionProperty
 */
export interface DistributionProperty extends Property {
    /**
     * 
     * @type {Distribution}
     * @memberof DistributionProperty
     */
    value?: Distribution;
}
/**
 * 
 * @export
 * @interface DistributionPropertyAllOf
 */
export interface DistributionPropertyAllOf {
    /**
     * 
     * @type {Distribution}
     * @memberof DistributionPropertyAllOf
     */
    value?: Distribution;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum DistributionType {
    Uniform = 'UNIFORM',
    Exponential = 'EXPONENTIAL'
}

/**
 * 
 * @export
 * @interface ExponentialDistribution
 */
export interface ExponentialDistribution extends Distribution {
    /**
     * 
     * @type {number}
     * @memberof ExponentialDistribution
     */
    lambda?: number;
}
/**
 * 
 * @export
 * @interface ExponentialDistributionAllOf
 */
export interface ExponentialDistributionAllOf {
    /**
     * 
     * @type {number}
     * @memberof ExponentialDistributionAllOf
     */
    lambda?: number;
}
/**
 * 
 * @export
 * @interface IntegerProperty
 */
export interface IntegerProperty extends Property {
    /**
     * 
     * @type {number}
     * @memberof IntegerProperty
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface IntegerPropertyAllOf
 */
export interface IntegerPropertyAllOf {
    /**
     * 
     * @type {number}
     * @memberof IntegerPropertyAllOf
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface Property
 */
export interface Property {
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    propertyType: string;
    /**
     * 
     * @type {boolean}
     * @memberof Property
     */
    valid?: boolean;
}
/**
 * 
 * @export
 * @interface StringAnalysisResult
 */
export interface StringAnalysisResult {
    /**
     * 
     * @type {string}
     * @memberof StringAnalysisResult
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface StringAnalysisResultAllOf
 */
export interface StringAnalysisResultAllOf {
    /**
     * 
     * @type {string}
     * @memberof StringAnalysisResultAllOf
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface StringProperty
 */
export interface StringProperty extends Property {
    /**
     * 
     * @type {string}
     * @memberof StringProperty
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface StringPropertyAllOf
 */
export interface StringPropertyAllOf {
    /**
     * 
     * @type {string}
     * @memberof StringPropertyAllOf
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface UniformDistribution
 */
export interface UniformDistribution extends Distribution {
    /**
     * 
     * @type {number}
     * @memberof UniformDistribution
     */
    left?: number;
    /**
     * 
     * @type {number}
     * @memberof UniformDistribution
     */
    right?: number;
}
/**
 * 
 * @export
 * @interface UniformDistributionAllOf
 */
export interface UniformDistributionAllOf {
    /**
     * 
     * @type {number}
     * @memberof UniformDistributionAllOf
     */
    left?: number;
    /**
     * 
     * @type {number}
     * @memberof UniformDistributionAllOf
     */
    right?: number;
}
/**
 * 
 * @export
 * @interface XYAnalysisResult
 */
export interface XYAnalysisResult {
    /**
     * 
     * @type {string}
     * @memberof XYAnalysisResult
     */
    xLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof XYAnalysisResult
     */
    yLabel?: string;
    /**
     * 
     * @type {Array<XYPoint>}
     * @memberof XYAnalysisResult
     */
    points?: Array<XYPoint>;
}
/**
 * 
 * @export
 * @interface XYAnalysisResultAllOf
 */
export interface XYAnalysisResultAllOf {
    /**
     * 
     * @type {string}
     * @memberof XYAnalysisResultAllOf
     */
    xLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof XYAnalysisResultAllOf
     */
    yLabel?: string;
    /**
     * 
     * @type {Array<XYPoint>}
     * @memberof XYAnalysisResultAllOf
     */
    points?: Array<XYPoint>;
}
/**
 * 
 * @export
 * @interface XYPoint
 */
export interface XYPoint {
    /**
     * 
     * @type {number}
     * @memberof XYPoint
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof XYPoint
     */
    y?: number;
}

/**
 * AnalysisApi - axios parameter creator
 * @export
 */
export const AnalysisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an analysis
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {string} analysisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnalysis: async (projectId: string, mapId: string, analysisId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteAnalysis', 'projectId', projectId)
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('deleteAnalysis', 'mapId', mapId)
            // verify required parameter 'analysisId' is not null or undefined
            assertParamExists('deleteAnalysis', 'analysisId', analysisId)
            const localVarPath = `/analysis/{projectId}/{mapId}/{analysisId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)))
                .replace(`{${"analysisId"}}`, encodeURIComponent(String(analysisId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets an analysis
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {string} analysisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalysis: async (projectId: string, mapId: string, analysisId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getAnalysis', 'projectId', projectId)
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('getAnalysis', 'mapId', mapId)
            // verify required parameter 'analysisId' is not null or undefined
            assertParamExists('getAnalysis', 'analysisId', analysisId)
            const localVarPath = `/analysis/{projectId}/{mapId}/{analysisId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)))
                .replace(`{${"analysisId"}}`, encodeURIComponent(String(analysisId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets available analysis
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableAnalysis: async (projectId: string, mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getAvailableAnalysis', 'projectId', projectId)
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('getAvailableAnalysis', 'mapId', mapId)
            const localVarPath = `/analysis/available`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets project map analysis
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapAnalysis: async (projectId: string, mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getMapAnalysis', 'projectId', projectId)
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('getMapAnalysis', 'mapId', mapId)
            const localVarPath = `/analysis/{projectId}/{mapId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Launch selected analysis
         * @param {AnalysisRequest} [analysisRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launchAnalysis: async (analysisRequest?: AnalysisRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/analysis/launch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(analysisRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalysisApi - functional programming interface
 * @export
 */
export const AnalysisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnalysisApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an analysis
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {string} analysisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAnalysis(projectId: string, mapId: string, analysisId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAnalysis(projectId, mapId, analysisId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets an analysis
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {string} analysisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnalysis(projectId: string, mapId: string, analysisId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Analysis>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnalysis(projectId, mapId, analysisId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets available analysis
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableAnalysis(projectId: string, mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnalysisType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableAnalysis(projectId, mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets project map analysis
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMapAnalysis(projectId: string, mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnalysisDescription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMapAnalysis(projectId, mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Launch selected analysis
         * @param {AnalysisRequest} [analysisRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async launchAnalysis(analysisRequest?: AnalysisRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalysisResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.launchAnalysis(analysisRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AnalysisApi - factory interface
 * @export
 */
export const AnalysisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnalysisApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an analysis
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {string} analysisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnalysis(projectId: string, mapId: string, analysisId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAnalysis(projectId, mapId, analysisId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets an analysis
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {string} analysisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalysis(projectId: string, mapId: string, analysisId: string, options?: any): AxiosPromise<Analysis> {
            return localVarFp.getAnalysis(projectId, mapId, analysisId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets available analysis
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableAnalysis(projectId: string, mapId: string, options?: any): AxiosPromise<Array<AnalysisType>> {
            return localVarFp.getAvailableAnalysis(projectId, mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets project map analysis
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapAnalysis(projectId: string, mapId: string, options?: any): AxiosPromise<Array<AnalysisDescription>> {
            return localVarFp.getMapAnalysis(projectId, mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Launch selected analysis
         * @param {AnalysisRequest} [analysisRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launchAnalysis(analysisRequest?: AnalysisRequest, options?: any): AxiosPromise<AnalysisResponse> {
            return localVarFp.launchAnalysis(analysisRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnalysisApi - object-oriented interface
 * @export
 * @class AnalysisApi
 * @extends {BaseAPI}
 */
export class AnalysisApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an analysis
     * @param {string} projectId 
     * @param {string} mapId 
     * @param {string} analysisId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public deleteAnalysis(projectId: string, mapId: string, analysisId: string, options?: any) {
        return AnalysisApiFp(this.configuration).deleteAnalysis(projectId, mapId, analysisId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets an analysis
     * @param {string} projectId 
     * @param {string} mapId 
     * @param {string} analysisId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public getAnalysis(projectId: string, mapId: string, analysisId: string, options?: any) {
        return AnalysisApiFp(this.configuration).getAnalysis(projectId, mapId, analysisId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets available analysis
     * @param {string} projectId 
     * @param {string} mapId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public getAvailableAnalysis(projectId: string, mapId: string, options?: any) {
        return AnalysisApiFp(this.configuration).getAvailableAnalysis(projectId, mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets project map analysis
     * @param {string} projectId 
     * @param {string} mapId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public getMapAnalysis(projectId: string, mapId: string, options?: any) {
        return AnalysisApiFp(this.configuration).getMapAnalysis(projectId, mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Launch selected analysis
     * @param {AnalysisRequest} [analysisRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public launchAnalysis(analysisRequest?: AnalysisRequest, options?: any) {
        return AnalysisApiFp(this.configuration).launchAnalysis(analysisRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


