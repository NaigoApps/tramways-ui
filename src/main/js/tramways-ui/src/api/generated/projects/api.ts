// tslint:disable
/**
 * Tramways Roadmaps API
 * Tramways Roadmaps API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Configurable
 */
export interface Configurable {
    /**
     * 
     * @type {string}
     * @memberof Configurable
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Configurable
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof Configurable
     */
    configurableType?: string;
    /**
     * 
     * @type {Array<PippoMYProperty>}
     * @memberof Configurable
     */
    props?: Array<PippoMYProperty>;
}
/**
 * 
 * @export
 * @interface CreateMapRequest
 */
export interface CreateMapRequest {
    /**
     * 
     * @type {RoadMap}
     * @memberof CreateMapRequest
     */
    map?: RoadMap;
}
/**
 * 
 * @export
 * @interface CrossingLink
 */
export interface CrossingLink extends Configurable {
    /**
     * 
     * @type {string}
     * @memberof CrossingLink
     */
    sourceId?: string;
    /**
     * 
     * @type {string}
     * @memberof CrossingLink
     */
    destinationId?: string;
}
/**
 * 
 * @export
 * @interface Lane
 */
export interface Lane extends Configurable {
    /**
     * 
     * @type {string}
     * @memberof Lane
     */
    sourceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Lane
     */
    destinationId?: string;
}
/**
 * 
 * @export
 * @interface LaneAllOf
 */
export interface LaneAllOf {
    /**
     * 
     * @type {string}
     * @memberof LaneAllOf
     */
    sourceId?: string;
    /**
     * 
     * @type {string}
     * @memberof LaneAllOf
     */
    destinationId?: string;
}
/**
 * 
 * @export
 * @interface Property
 */
export interface Property {
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    propertyType: string;
    /**
     * 
     * @type {boolean}
     * @memberof Property
     */
    valid?: boolean;
}
/**
 * 
 * @export
 * @interface RelevantPoint
 */
export interface RelevantPoint extends Configurable {
    /**
     * 
     * @type {Array<CrossingLink>}
     * @memberof RelevantPoint
     */
    links?: Array<CrossingLink>;
}
/**
 * 
 * @export
 * @interface RelevantPointAllOf
 */
export interface RelevantPointAllOf {
    /**
     * 
     * @type {Array<CrossingLink>}
     * @memberof RelevantPointAllOf
     */
    links?: Array<CrossingLink>;
}
/**
 * 
 * @export
 * @interface RoadMap
 */
export interface RoadMap {
    /**
     * 
     * @type {string}
     * @memberof RoadMap
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof RoadMap
     */
    name?: string;
    /**
     * 
     * @type {RoadMapContent}
     * @memberof RoadMap
     */
    content?: RoadMapContent;
}
/**
 * 
 * @export
 * @interface RoadMapContent
 */
export interface RoadMapContent {
    /**
     * 
     * @type {Array<RelevantPoint>}
     * @memberof RoadMapContent
     */
    points?: Array<RelevantPoint>;
    /**
     * 
     * @type {Array<Lane>}
     * @memberof RoadMapContent
     */
    lanes?: Array<Lane>;
}
/**
 * 
 * @export
 * @interface RoadMapDescription
 */
export interface RoadMapDescription {
    /**
     * 
     * @type {string}
     * @memberof RoadMapDescription
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof RoadMapDescription
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface UpdateMapRequest
 */
export interface UpdateMapRequest {
    /**
     * 
     * @type {RoadMap}
     * @memberof UpdateMapRequest
     */
    map?: RoadMap;
}

/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a map
         * @param {string} projectId 
         * @param {CreateMapRequest} [createMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMap(projectId: string, createMapRequest?: CreateMapRequest, options: any = {}): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling createMap.');
            }
            const localVarPath = `/projects/{projectId}/maps`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createMapRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createMapRequest !== undefined ? createMapRequest : {}) : (createMapRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a map
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMap(projectId: string, mapId: string, options: any = {}): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling deleteMap.');
            }
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling deleteMap.');
            }
            const localVarPath = `/projects/{projectId}/maps/{mapId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a map
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMap(projectId: string, mapId: string, options: any = {}): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getMap.');
            }
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling getMap.');
            }
            const localVarPath = `/projects/{projectId}/maps/{mapId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a map
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {UpdateMapRequest} [updateMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMap(projectId: string, mapId: string, updateMapRequest?: UpdateMapRequest, options: any = {}): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling updateMap.');
            }
            // verify required parameter 'mapId' is not null or undefined
            if (mapId === null || mapId === undefined) {
                throw new RequiredError('mapId','Required parameter mapId was null or undefined when calling updateMap.');
            }
            const localVarPath = `/projects/{projectId}/maps/{mapId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateMapRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateMapRequest !== undefined ? updateMapRequest : {}) : (updateMapRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a map
         * @param {string} projectId 
         * @param {CreateMapRequest} [createMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMap(projectId: string, createMapRequest?: CreateMapRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoadMap> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).createMap(projectId, createMapRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes a map
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMap(projectId: string, mapId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).deleteMap(projectId, mapId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets a map
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMap(projectId: string, mapId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoadMap> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).getMap(projectId, mapId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates a map
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {UpdateMapRequest} [updateMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMap(projectId: string, mapId: string, updateMapRequest?: UpdateMapRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProjectsApiAxiosParamCreator(configuration).updateMap(projectId, mapId, updateMapRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Creates a map
         * @param {string} projectId 
         * @param {CreateMapRequest} [createMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMap(projectId: string, createMapRequest?: CreateMapRequest, options?: any): AxiosPromise<RoadMap> {
            return ProjectsApiFp(configuration).createMap(projectId, createMapRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes a map
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMap(projectId: string, mapId: string, options?: any): AxiosPromise<void> {
            return ProjectsApiFp(configuration).deleteMap(projectId, mapId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets a map
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMap(projectId: string, mapId: string, options?: any): AxiosPromise<RoadMap> {
            return ProjectsApiFp(configuration).getMap(projectId, mapId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Updates a map
         * @param {string} projectId 
         * @param {string} mapId 
         * @param {UpdateMapRequest} [updateMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMap(projectId: string, mapId: string, updateMapRequest?: UpdateMapRequest, options?: any): AxiosPromise<void> {
            return ProjectsApiFp(configuration).updateMap(projectId, mapId, updateMapRequest, options)(axios, basePath);
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * 
     * @summary Creates a map
     * @param {string} projectId 
     * @param {CreateMapRequest} [createMapRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public createMap(projectId: string, createMapRequest?: CreateMapRequest, options?: any) {
        return ProjectsApiFp(this.configuration).createMap(projectId, createMapRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes a map
     * @param {string} projectId 
     * @param {string} mapId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteMap(projectId: string, mapId: string, options?: any) {
        return ProjectsApiFp(this.configuration).deleteMap(projectId, mapId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets a map
     * @param {string} projectId 
     * @param {string} mapId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getMap(projectId: string, mapId: string, options?: any) {
        return ProjectsApiFp(this.configuration).getMap(projectId, mapId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Updates a map
     * @param {string} projectId 
     * @param {string} mapId 
     * @param {UpdateMapRequest} [updateMapRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public updateMap(projectId: string, mapId: string, updateMapRequest?: UpdateMapRequest, options?: any) {
        return ProjectsApiFp(this.configuration).updateMap(projectId, mapId, updateMapRequest, options)(this.axios, this.basePath);
    }

}


